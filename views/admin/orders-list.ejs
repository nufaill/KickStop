<%- include("../../views/layouts/admin/header") %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    .status-pending {
        background-color: #FFA500;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-shipped {
        background-color: #6cee4f;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-processing {
        background-color: #2196F3;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-delivered {
        background-color: #008013;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-cancelled {
        background-color: #F44336;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-return-request {
        background-color: #FF9800;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }
    .status-returned {
        background-color: #9C27B0;
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: bold;
    }

    select[name="status"] {
        padding: 8px;
        border-radius: 8px;
        border: 2px solid #e0e0e0;
        transition: all 0.3s ease;
        font-weight: 600;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath d='M1 4l5 5 5-5z' fill='%23999999'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 12px;
    }

    select[name="status"]:hover {
        border-color: #800000;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
    }
.status-label {
    display: inline-block;
    transition: all 0.3s ease-in-out;
}


select[name="status"] option {
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
}

select[name="status"]:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

/* Animation for the table rows */
.table-hover tbody tr {
    transition: transform 0.2s ease, background-color 0.3s ease;
}

.table-hover tbody tr:hover {
    transform: scale(1.02);
    background-color: rgba(240, 240, 240, 0.8);
}

/* Pagination link hover */
.pagination .page-item .page-link {
    transition: all 0.3s ease;
}

.pagination .page-item .page-link:hover {
    background-color: #800000;
    color: white;
    box-shadow: 0 4px 10px rgba(76, 175, 80, 0.4);
}

/* Fade-in animation for content */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.content-main {
    animation: fadeIn 0.8s ease-in-out;
}

</style>

<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Order List</h2>
        </div>
        <div>
            <input type="text" placeholder="Search order ID" class="form-control bg-white">
        </div>
    </div>
    <div class="card mb-4">
        <header class="card-header">
            <div class="row gx-3">
                <div class="col-lg-4 col-md-6 me-auto">
                    <input type="text" placeholder="Search" class="form-control">
                </div>
                <div class="col-lg-2 col-6 col-md-3">
                    <select class="form-select">
                        <option>Show all</option>
                        <option>pending</option>
                        <option>Shipped</option>
                        <option>Delivered</option>
                    </select>
                </div>
            </div>
        </header>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>#ID</th>
                            <th scope="col">Product Name</th>
                            <th scope="col">Date</th>
                            <th scope="col">Name of User</th>
                            <th scope="col">Total</th>
                            <th scope="col">Status</th>
                            <th scope="col">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% orders.forEach(order => { %>
                            <tr>
                                <td><%= order._id %></td>
                                <td>
                                    <% order.orderedItems.forEach(item => { %>
                                        <%= item.product.productName %><br> 
                                    <% }) %>
                                </td>
                                <td><%= order.createdOn.toDateString() %></td>
                                <td><%= order.user ? order.user.username : 'Unknown User' %></td>
                                <td>â‚¹<%= order.finalAmount.toFixed(2) %></td>
                                <td>
                                    <select name="status" data-current-status="<%= order.status %>" onchange="updateStatus('<%= order._id %>', this)">
                                        <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>
                                            <span class="status-pending">Pending</span>
                                        </option>
                                        <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                                        <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>
                                            <span class="status-shipped">Shipped</span>
                                        </option>
                                        <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                                        <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                                        <option value="Return Request" <%= order.status === 'Return Request' ? 'selected' : '' %>>Return Request</option>
                                        <option value="Returned" <%= order.status === 'Returned' ? 'selected' : '' %>>Returned</option>
                                    </select>                                    
                                </td> 
                                <td>
                                    <button 
                                        type="button" 
                                        class="btn-edit" 
                                        style="background-color: aqua;" 
                                        onclick="showOrderDetails(this.getAttribute('data-order'))"
                                        data-order="<%= encodeURIComponent(JSON.stringify(order)) %>"
                                    >
                                        View Details
                                    </button>
                                </td>                            </tr>
                        <% }) %>
                    </tbody>                    
                </table>
            </div>
        </div>
    </div>
    <!-- Pagination Section -->
    <div class="pagination-area mt-15 mb-50">
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-start">
                <% if (currentPage > 1) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
                    </li>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                        <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>"><%= i %></a>
                    </li>
                <% } %>
                <% if (currentPage < totalPages) { %>
                    <li class="page-item">
                        <a class="page-link" href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
    <div class="modal fade order-details-modal" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="orderDetailsModalBody">
                </div>
        </div>
    </div>
</section>
<%- include("../../views/layouts/admin/footer") %>

<script>
    async function updateStatus(orderId, selectElement) {
        const currentStatus = selectElement.getAttribute("data-current-status");
        const newStatus = selectElement.value;
    
        if (currentStatus === "Delivered") {
            Swal.fire({
                title: "Status Locked",
                text: "The order is already delivered and cannot be changed to another status.",
                icon: "warning",
                confirmButtonText: "OK"
            });
            selectElement.value = "Delivered";
            return;
        }
    
        try {
            const response = await fetch(`/admin/update-status/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });
    
            if (response.ok) {
                Swal.fire({
                    title: 'Success',
                    text: 'Order Status Updated Successfully',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
                selectElement.setAttribute("data-current-status", newStatus);
                
                const statusClassMap = {
                    'Pending': 'status-pending',
                    'Processing': 'status-processing',
                    'Shipped': 'status-shipped',
                    'Delivered': 'status-delivered',
                    'Cancelled': 'status-cancelled',
                    'Return Request': 'status-return-request',
                    'Returned': 'status-returned'
                };
    
                selectElement.classList.remove(
                    ...Object.values(statusClassMap)
                );
                selectElement.classList.add(statusClassMap[newStatus] || '');
            } else {
                Swal.fire({
                    title: "Failed",
                    text: "Order Status Update Failed",
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                selectElement.value = currentStatus;
            }
        } catch (error) {
            console.error("Error:", error);
        }
    }
    async function showOrderDetails(encodedOrderData) {
    try {
        // Decode the URL-encoded string and parse the JSON
        const orderData = JSON.parse(decodeURIComponent(encodedOrderData));
        const modalBody = document.getElementById('orderDetailsModalBody');
        
        const orderDetails = {
            orderId: orderData?.orderId ? orderData.orderId.toString().slice(-8).toUpperCase() : 'N/A',
            date: orderData?.createdOn ? new Date(orderData.createdOn).toLocaleDateString() : 'N/A',
            paymentMethod: orderData?.paymentMethod || 'N/A',
            finalAmount: orderData?.finalAmount || 0,
            status: orderData?.status || 'N/A',
            address: orderData?.address || null,
            items: orderData?.orderedItems || [],
            couponCode: orderData?.couponCode || 'No Coupon Applied',
            couponAmount: orderData?.couponAmount || 0
        };

        // Sanitize strings to prevent XSS
        const sanitizeHtml = (str) => {
            const div = document.createElement('div');
            div.textContent = str;
            return div.innerHTML;
        };

        let detailsHTML = `
            <div class="row">
                <div class="col-md-6">
                    <h6><strong>Order Information</strong></h6>
                    <p><strong>Order ID:</strong> ${sanitizeHtml(orderDetails.orderId)}</p>
                    <p><strong>Date:</strong> ${sanitizeHtml(orderDetails.date)}</p>
                    <p><strong>Payment Method:</strong> ${sanitizeHtml(orderDetails.paymentMethod)}</p>
                    <p><strong>Total Amount:</strong> â‚¹${orderDetails.finalAmount.toFixed(2)}</p>
                    <p><strong>Status:</strong> ${sanitizeHtml(orderDetails.status)}</p>
                </div>
                <div class="col-md-6">
                    <h6><strong>Shipping Address</strong></h6>
                    <p>
                        ${orderDetails.address ? `
                            ${sanitizeHtml(orderDetails.address.name || 'Name not provided')}<br>
                            ${sanitizeHtml(orderDetails.address.address || 'Address line not provided')}<br>
                            ${sanitizeHtml(orderDetails.address.city || 'City')}, 
                            ${sanitizeHtml(orderDetails.address.state || 'State')} 
                            ${sanitizeHtml(orderDetails.address.pincode || 'Pincode')}<br>
                            ${orderDetails.address.landmark ? `Landmark: ${sanitizeHtml(orderDetails.address.landmark)}<br>` : ''}
                            ${sanitizeHtml(orderDetails.address.phone || 'Phone not provided')}
                        ` : 'No shipping address available'}
                    </p>
                </div>
            </div>
            <hr>
            <div class="row">
                <div class="col-md-12">
                    <h6><strong>Coupon Details</strong></h6>
                    <p><strong>Coupon Code:</strong> ${sanitizeHtml(orderDetails.couponCode)}</p>
                </div>
            </div>
            <hr>
            <h6><strong>Ordered Items</strong></h6>
            <div class="row">
                ${orderDetails.items.length > 0 ? 
                    orderDetails.items.map(item => {
                        const product = item.product || {};
                        const safeProductName = sanitizeHtml(product.productName || 'Product Name Unavailable');
                        
                        return `
                            <div class="col-md-12 product-row d-flex align-items-center mb-3">
                                <div class="mr-3">
                                    <img src="${
                                        (product.productImage && product.productImage.length > 0) ? 
                                        '/uploads/re-image/' + sanitizeHtml(product.productImage[0]) : 
                                        '/assets/imgs/default-product.jpg'
                                    }" 
                                    alt="${safeProductName}" 
                                    style="width: 100px; height: 100px; object-fit: cover; margin-right: 15px;">
                                </div>
                                <div>
                                    <p class="mb-1"><strong>${safeProductName}</strong></p>
                                    <p class="mb-1">Quantity: ${sanitizeHtml(String(item.quantity || 'N/A'))}</p>
                                    <p class="mb-1">Price: â‚¹${(item.price ? item.price.toLocaleString() : 'N/A')}</p>
                                </div>
                            </div>
                        `;
                    }).join('<hr>') : 
                    '<p>No items found in this order.</p>'
                }
            </div>
        `;

        modalBody.innerHTML = detailsHTML;
        
        const orderDetailsModal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
        orderDetailsModal.show();

    } catch (error) {
        console.error('Error in showOrderDetails:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            html: `
                <p>Failed to load order details. Please try again.</p>
                <pre style="text-align: left; color: red; background: #f9f9f9; padding: 10px; border-radius: 4px;">
                    ${sanitizeHtml(error.stack || 'No additional details available.')}
                </pre>
            `,
            confirmButtonColor: '#800000'
        });
    }
}
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
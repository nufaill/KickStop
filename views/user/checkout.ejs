<%- include('../layouts/user/header') %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <style>
        :root {
            --primary-color: #800000;
            --secondary-color: #f8f8f8;
            --text-color: #333;
            --border-color: #e2e2e2;
            --hover-color: #600000;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: var(--secondary-color);
            color: var(--text-color);
        }

        .main {
            padding: 2rem 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        .page-header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem 0;
            margin-bottom: 2rem;
        }

        .breadcrumb {
            display: flex;
            list-style: none;
            padding: 0;
        }

        .breadcrumb a {
            color: white;
            text-decoration: none;
        }

        .breadcrumb span {
            margin: 0 0.5rem;
        }

        h5 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .shipping-address-selection {
            max-height: 400px;
            overflow-y: auto;
            padding-right: 1rem;
        }

        .address-box {
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .address-box:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .address-radio {
            display: none;
        }

        .address-label {
            display: block;
            padding: 1.25rem;
            cursor: pointer;
        }

        .address-radio:checked+.address-label {
            background-color: #f8fff9;
            border-color: var(--primary-color);
        }

        .address-radio:checked+.address-label::before {
            content: '✓';
            position: absolute;
            right: 15px;
            top: 15px;
            color: var(--primary-color);
            font-weight: bold;
        }

        .address-type-badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }

        .address-type-badge.home {
            background-color: #e8f6ff;
            color: #0084ff;
        }

        .address-type-badge.work {
            background-color: #fff2e5;
            color: #ff6b00;
        }

        .address-type-badge.other {
            background-color: #f0f0f0;
            color: #666;
        }

        .name-section h6 {
            color: var(--primary-color);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .address-details p {
            margin-bottom: 0.5rem;
            color: #555;
        }

        .contact-info {
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: 1px dashed #eee;
        }

        .btn-add-address {
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s ease;
        }

        .btn-add-address:hover {
            background-color: var(--hover-color);
        }

        .order_review {
            background-color: white;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1.5rem;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .table th {
            background-color: #f8f8f8;
        }

        .product-thumbnail img {
            max-width: 60px;
            border-radius: 4px;
        }

        .toggle_info {
            background-color: #f8f8f8;
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
        }

        .coupon_form {
            margin-top: 1rem;
        }

        .payment_option {
            margin-top: 2rem;
        }

        .custome-radio {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .custome-radio input[type="radio"] {
            margin-right: 0.5rem;
        }

        #paymentButtons {
            margin-top: 2rem;
        }

        .btn-fill-out {
            background-color: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn-fill-out:hover {
            background-color: var(--hover-color);
        }

        @media (max-width: 768px) {
            .shipping-address-selection {
                max-height: none;
                overflow-y: visible;
            }

            .address-label {
                padding: 1rem;
            }

            .address-type-badge {
                font-size: 0.7rem;
                padding: 0.2rem 0.4rem;
            }
        }

        .address-box {
            position: relative;
            transition: all 0.3s ease;
            border: 2px solid transparent;
            overflow: hidden;
        }

        .address-box::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(128, 0, 0, 0.1), transparent);
            transform: rotate(-45deg);
            transition: all 0.5s ease;
            opacity: 0;
        }

        .address-box:hover::before {
            opacity: 1;
        }

        .address-box.selected {
            border-color: var(--primary-color);
            box-shadow: 0 4px 15px rgba(128, 0, 0, 0.2);
            transform: scale(1.02);
        }

        .address-box.selected::after {
            content: '✓';
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: var(--primary-color);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            animation: popIn 0.3s ease-out;
        }

        @keyframes popIn {
            0% {
                transform: scale(0);
            }

            80% {
                transform: scale(1.2);
            }

            100% {
                transform: scale(1);
            }
        }

        .address-label {
            cursor: pointer;
            position: relative;
            transition: background-color 0.3s ease;
        }

        .address-label:hover {
            background-color: rgba(128, 0, 0, 0.05);
        }
    </style>

    <main class="main">
        <div class="page-header">
            <div class="container">
                <div class="breadcrumb">
                    <a href="/" rel="nofollow">Home</a>
                    <span> / </span>
                    <a href="/all-products">Shop</a>
                    <span> / </span>
                    <span>Checkout</span>
                </div>
            </div>
        </div>

        <section class="mt-50 mb-50">
            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-4">
                            <h5 class="fw-bold">Select Your Address</h5>
                        </div>
                        <div class="form-group">
                            <div class="shipping-address-selection">
                                <% addresses.forEach((address, index)=> { %>
                                    <div class="address-box mb-3">
                                        <input type="radio" name="selectedAddress" id="address-<%= index %>"
                                            value="<%= address._id %>" class="address-radio" required>
                                        <label class="address-label" for="address-<%= index %>">
                                            <div class="address-type-badge <%= address.addressType.toLowerCase() %>">
                                                <%= address.addressType %>
                                            </div>
                                            <div class="address-content">
                                                <div class="name-section">
                                                    <h6 class="mb-2">
                                                        <%= address.name %>
                                                    </h6>
                                                </div>
                                                <div class="address-details">
                                                    <% if (address.landMark) { %>
                                                        <p class="landmark"><i class="fi-rs-marker me-2"></i>
                                                            <%= address.landMark %>
                                                        </p>
                                                        <% } %>
                                                            <p class="location">
                                                                <%= address.city %>, <%= address.state %>
                                                                        <%= address.pincode %>
                                                            </p>
                                                            <div class="contact-info">
                                                                <p class="phone">
                                                                    <i class="fi-rs-phone-call me-2"></i>
                                                                    <%= address.phone %>
                                                                        <% if (address.altPhone) { %>
                                                                            <span class="alt-phone">/ <%=
                                                                                    address.altPhone %></span>
                                                                            <% } %>
                                                                </p>
                                                            </div>
                                                </div>
                                            </div>
                                        </label>
                                    </div>
                                    <% }); %>
                            </div>

                            <div class="add-address-section mt-4">
                                <a href="/addAddress" class="btn btn-add-address">
                                    <i class="fi-rs-plus me-2"></i>Add New Address
                                </a>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="order_review">
                            <h4>Your Orders</h4>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% if (product) { %>
                                        <tr>
                                            <td>
                                                <img src="/uploads/re-image/<%= product.productImage[0] %>"
                                                    alt="<%= product.productName %>" width="50" height="50"
                                                    class="mr-2">
                                                <%= product.productName %> (x<%=quantity %>)
                                            </td>
                                            <td>₹<%= product.salePrice.toLocaleString() %>
                                            </td>
                                        </tr>
                                        <% } else if (cart && cart.items.length> 0) { %>
                                            <% cart.items.forEach(item=> { %>
                                                <tr>
                                                    <td>
                                                        <img src="/uploads/re-image/<%= item.productId.productImage[0] %>"
                                                            alt="<%= item.productId.productName %>" width="50"
                                                            height="50" class="mr-2">
                                                        <%= item.productId.productName %> (x<%= item.quantity %>)
                                                    </td>
                                                    <td>₹<%= item.totalPrice.toLocaleString() %>
                                                    </td>
                                                </tr>
                                                <% }); %>
                                                    <% } else { %>
                                                        <tr>
                                                            <td colspan="2">No items in cart or product selection.</td>
                                                        </tr>
                                                        <% } %>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th>Subtotal</th>
                                        <td id="subtotal">₹<%= totalAmount.toLocaleString() %>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>Coupon Discount</th>
                                        <td colspan="2"><em id="discount">0</em></td>
                                    </tr>
                                    <tr>
                                        <th>Total Amount</th>
                                        <td id="totalPriceAfterDiscount">
                                            ₹<%= (totalAmount).toLocaleString() %>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>

                            <form id="orderForm" method="POST" action="/place-order-initial"
                                onsubmit="return validateAddress()">
                                <div class="payment_option">
                                    <h4>Select Payment Method</h4>
                                    <div class="custome-radio">
                                        <input class="form-check-input" required type="radio" value="COD"
                                            name="payment_option" id="exampleRadios3" checked
                                            onchange="togglePaymentButtons()">
                                        <label class="form-check-label" for="exampleRadios3">Cash on Delivery</label>
                                    </div>
                                    <div class="custome-radio">
                                        <input class="form-check-input" required type="radio" value="Online"
                                            name="payment_option" id="exampleRadios5" onchange="togglePaymentButtons()">
                                        <label class="form-check-label" for="exampleRadios5">Online Payment</label>
                                    </div>
                                </div>

                                <div class="coupon-field">
                                    <h4>Apply Coupon</h4>
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" id="couponCode" name="couponCode"
                                            placeholder="Enter coupon code">
                                        <span id="couponMessage"></span>
                                        <div class="input-group-append">
                                            <button type="button" onclick="applyCoupon()" class="btn btn-md " style="margin-left: 10px;"
                                                id="applyCouponBtn">Apply Coupon</button>
                                            <button id="removeCouponBtn" class="d-none btn btn-md"
                                                onclick="removeCoupon()">Remove Coupon</button>
                                        </div>
                                    </div>
                                </div>

                                <input type="hidden" name="cart" value='<%= JSON.stringify(cart ? cart.items : []) %>'>
                                <input type="hidden" id="totalamount" name="totalPrice" value="<%= totalAmount %>">
                                <% if (product) { %>
                                    <input type="hidden" name="singleProduct" value="<%= JSON.stringify(product) %>">
                                    <% } %>
                                        <input type="hidden" name="totalAmount" id="productAmount" value="0">
                                        <input type="hidden" name="addressId" id="addressId">
                                        <input type="hidden" id="discountInput" name="discount" value="0">
                                        <div>
                                            <a href="/couponList" class="btn btn"
                                                style="background-color: #800000;">Show
                                                Available coupons</a>
                                        </div>
                                        <div id="paymentButtons" class="mt-4">
                                            <button type="submit" class="btn btn-fill-out btn-block"
                                                id="submitButton">Place Order</button>
                                            <button type="button" class="btn btn-fill-out btn-block" id="razorpayButton"
                                                onclick="validateAndOpenRazorpay(document.getElementById('totalamount').value)"
                                                style="display: none;">Pay with Razorpay</button>
                                        </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <%- include('../layouts/user/footer') %>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

        <script>
            if (performance.navigation.type === performance.navigation.TYPE_BACK_FORWARD) {
                window.location.reload();
            }
            let variable = 0;
            function syncDiscount() {
                const discountValue = document.getElementById('discount').innerText.replace('₹', '');
                document.getElementById('discountInput').value = discountValue;
                const totalPrice = document.getElementById('subtotal').innerText.replace('₹', '');
                document.getElementById('productAmount').value = totalPrice;
                variable = document.getElementById('productAmount').value;
            }
            function validateAndOpenRazorpay(amount) {
                if (validateAddress()) {
                    openRazorpay();
                }
            }

            function validateAddress() {
                syncDiscount()
                const addressRadioButtons = document.querySelectorAll('input[name="selectedAddress"]');
                let addressSelected = false;
                let selectedAddressId = '';

                addressRadioButtons.forEach((radio) => {
                    if (radio.checked) {
                        addressSelected = true;
                        selectedAddressId = radio.value;
                    }
                });

                if (!addressSelected) {
                    Swal.fire({
                        position: "top-end",
                        icon: "warning",
                        title: "select a address",
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        toast: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });
                    return false;
                }

                let selectedPaymentOption = "COD";
                const paymentOption = document.getElementsByName('payment_option');

                document.getElementById('addressId').value = selectedAddressId;

                paymentOption.forEach(option => {
                    if (option.checked) {
                        selectedPaymentOption = option.value;
                    }
                });
                const totalPrice = parseFloat(variable.replace(/,/g, ''));
                if (totalPrice > 1000 && selectedPaymentOption === 'COD') {
                    Swal.fire({
                        position: "top-end",
                        icon: "warning",
                        title: "COD not available for this orders",
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        toast: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });
                    return false;
                }

                return true;
            }

            function togglePaymentButtons() {
                const submitButton = document.getElementById('submitButton');
                const razorpayButton = document.getElementById('razorpayButton');
                const paymentOption = document.querySelector('input[name="payment_option"]:checked').value;

                if (paymentOption === 'COD') {
                    submitButton.style.display = 'block';
                    razorpayButton.style.display = 'none';
                } else {
                    submitButton.style.display = 'none';
                    razorpayButton.style.display = 'block';
                }
            }

            async function openRazorpay() {
                try {
                    const orderData = {
                        cart: document.querySelector('input[name="cart"]').value,
                        totalPrice: document.getElementById('totalamount').value - document.getElementById('discountInput').value,
                        payment_option: 'Online',
                        addressId: document.getElementById('addressId').value,
                        singleProduct: document.querySelector('input[name="singleProduct"]') ? document.querySelector('input[name="singleProduct"]').value : null,
                        discount: document.getElementById('discountInput').value,
                        totalAmount: document.getElementById('productAmount').value,
                        couponCode: document.getElementById('couponCode').value
                    };

                    const placeOrderResponse = await fetch('/place-order-initial', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orderData)
                    });
                    if (!placeOrderResponse.ok) {
                        throw new Error("Order placement failed");
                    }
                    
                    const placeOrderData = await placeOrderResponse.json();

                    const amount = parseFloat(placeOrderData.finalAmount);
                    const createOrderResponse = await fetch('/create-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ amount, currency: 'INR' })
                    });

                    const order = await createOrderResponse.json();

                    const options = {
                        key: '<%= process.env.RAZOR_KEY_ID %>',
                        amount: order.amount,
                        currency: order.currency,
                        name: 'KickStop',
                        description: 'Purchase Transaction',
                        order_id: order.id,
                        handler: async function (response) {
                            try {
                                const updateResponse = await fetch('/update-order', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        orderId: placeOrderData.orderId,
                                        paymentId: response.razorpay_payment_id,
                                        razorpayOrderId: response.razorpay_order_id,
                                        signature: response.razorpay_signature,
                                        status: 'Completed'
                                    })
                                });

                                if (updateResponse.ok) {
                                    window.location.href = `/order-confirmation?id=${placeOrderData.orderId}`;
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Order Update Failed',
                                        text: 'Payment was successful, but updating the order failed. Please contact support.',
                                        confirmButtonColor: '#800000',
                                    });
                                }
                            } catch (error) {
                                console.error("Error updating order:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Order Update Error',
                                    text: 'Payment was successful, but there was an error updating your order. Please contact support.',
                                    confirmButtonColor: '#800000',
                                });
                            }
                        },
                        theme: { color: '#800000' }
                    };

                    const rzp = new Razorpay(options);


                    rzp.on('payment.failed', async function (response) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: 'The payment process failed. Please try again.',
                            confirmButtonColor: '#800000',
                        });


                        try {
                            await fetch('/update-order', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId: placeOrderData.orderId,
                                    status: 'Payment Failed',
                                    paymentError: response.error
                                })
                            });
                        } catch (error) {
                            console.error("Error updating order to 'Payment Failed':", error);
                        }

                    });

                    rzp.open();
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Order or Payment Error',
                        text: 'There was an error processing your order. Please try again.',
                        confirmButtonColor: '#800000',
                    });
                }
            }



            async function applyCoupon() {
                const couponCodeInput = document.getElementById('couponCode');
                const totalPriceElement = document.getElementById('subtotal');
                const discountDisplay = document.getElementById('discount');
                const finalTotalDisplay = document.getElementById('totalPriceAfterDiscount');
                const couponMessage = document.getElementById('couponMessage');
                const couponError = document.getElementById('couponError');
                const applybtn = document.getElementById('applyCouponBtn');
                const removebtn = document.getElementById('removeCouponBtn')

                if (!couponCodeInput || !totalPriceElement || !discountDisplay || !finalTotalDisplay) {
                    Swal.fire({
                        text: 'Something went wrong. Please refresh the page.',
                        icon: 'error'
                    });
                    return;
                }

                const couponCode = couponCodeInput.value.trim();
                if (!couponCode) {
                    Swal.fire({
                        position: "top-end",
                        icon: "warning",
                        title: 'Empty Coupon',
                        text: 'Please enter a coupon code.',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        toast: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });
                    return;
                }
                const price = totalPriceElement.innerText.replace(',', '').replace('₹', '')
                let originalPrice = parseFloat(price);
                if (isNaN(originalPrice)) {
                    Swal.fire({
                        text: 'Invalid price value.',
                        icon: 'error'
                    });
                    return;
                }
                try {
                    const response = await fetch('/apply-coupon', { 
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponCode, totalPrice: originalPrice })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status} `);
                    }

                    const result = await response.json();
                    if (result.success) {
                        let discountAmount = Math.round(result.discountAmount) || 0;
                        const finalPrice = originalPrice - discountAmount;
                        Number(finalPrice)


                        if (typeof discountAmount === "number" && typeof finalPrice === "number") {
                            discountDisplay.innerHTML = `₹${discountAmount.toFixed(2)}`;
                            finalTotalDisplay.innerHTML = `₹${finalPrice.toFixed(2)}`;
                            totalPriceElement.value = finalPrice.toFixed(2);
                        } else {
                            discountDisplay.innerHTML = "Error applying discount";
                            finalTotalDisplay.innerHTML = "Error calculating total";
                            return;

                        }
                        // couponMessage.textContent = result.message || 'Coupon applied successfully!';
                        // couponMessage.classList.remove('d-none');
                        // couponError.classList.add('d-none');
                        applybtn.classList.add('d-none');
                        removebtn.classList.remove('d-none');

                       
                        Swal.fire({
                            position: "top-end",
                            icon: "success",
                            title:  'Coupon Applied',
                            text: `You saved ₹${discountAmount.toFixed(2)}!`,
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            toast: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        });
                    } else {
                        couponMessage.classList.add('d-none');
                        couponError.textContent = result.message || 'Invalid coupon code.';
                        couponError.classList.remove('d-none');
                    }
                } catch (error) {
                    Swal.fire({
                        position: "top-end",
                        icon: "warning",
                        title: "Invalid coupon",
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true,
                        toast: true,
                        didOpen: (toast) => {
                            toast.addEventListener('mouseenter', Swal.stopTimer)
                            toast.addEventListener('mouseleave', Swal.resumeTimer)
                        }
                    });
                }
            }


            async function removeCoupon() {
                const totalPriceElement = document.getElementById('finalPrice');
                const discountRow = document.getElementById('discountDisplay');
                const applyCouponBtn = document.getElementById('applyCouponBtn');
                const removeCouponBtn = document.getElementById('removeCouponBtn');
                const couponCodeInput = document.getElementById('couponCode');

                if (!totalPriceElement || !discountRow) {
                    Swal.fire({
                        text: "Something went wrong. Please refresh the page and try again.",
                        icon: "error"
                    });
                    return;
                }

                const originalPrice = parseFloat(totalPriceElement.getAttribute('data-original-price'));
                if (isNaN(originalPrice)) {
                    Swal.fire({
                        text: "Original price not found",
                        icon: "error"
                    });
                    return;
                }

                try {
                    const response = await fetch('/remove-coupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ totalPrice: originalPrice })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.success) {

                        Swal.fire({
                            text: "Coupon removed successfully",
                            icon: "success"
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        text: "Failed to remove the coupon",
                        icon: "error"
                    });
                }
            }
            document.addEventListener('DOMContentLoaded', function () {
                togglePaymentButtons();
            });
            
        </script>
<%- include('../layouts/user/header.ejs') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<style>
    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #e3fdf5, #ffe6fa);
        padding: 0;
        margin: 0;
    }

    .order-container {
        max-width: 900px;
        margin: 0 auto;
        background: rgba(255, 255, 255, 0.9);
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease;
    }

    .order-container:hover {
        transform: scale(1.01);
    }

    .order-card {
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        margin-bottom: 20px;
        padding: 20px;
        background: #fff;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .order-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-bottom: 15px;
        border-bottom: 1px solid #eee;
        font-size: 1rem;
    }

    .status-badge {
        padding: 8px 12px;
        border-radius: 20px;
        font-size: 0.9em;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .status-badge:hover {
        transform: scale(1.1);
    }

    .status-pending {
        background-color: #FFC107;
        color: white;
    }

    .status-processing {
        background-color: #2196F3;
        color: white;
    }

    .status-shipped {
        background-color: #4CAF50;
        color: white;
    }

    .status-delivered {
        background-color: #9C27B0;
        color: white;
    }

    .status-cancelled {
        background-color: #F44336;
        color: white;
    }

    .product-list {
        margin-top: 15px;
    }

    .product-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #f0f0f0;
        transition: background-color 0.3s ease;
    }

    .product-item:hover {
        background-color: #f9f9f9;
    }

    .product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 10px;
        margin-right: 15px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .order-actions button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-size: 0.9rem;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s ease;
    }

    .btn-cancel {
        background: #f44336;
        color: #fff;
    }

    .btn-cancel:hover {
        background: #d32f2f;
        transform: scale(1.05);
    }

    .btn-edit {
        background: #2196f3;
        color: #fff;
    }

    .btn-edit:hover {
        background: #1976d2;
        transform: scale(1.05);
    }

    @media (max-width: 768px) {
        .order-container {
            width: 95%;
        }

        .order-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .product-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .product-image {
            margin-bottom: 10px;
        }
    }
    @media (min-width: 1024px) {
        .order-container {
            width: 80%;
            max-width: 1200px;
            padding: 40px;
            margin: 50px auto;
            border-radius: 15px;
            background: linear-gradient(135deg, #ffffff, #f8f8f8);
        }

        .order-header {
            flex-direction: row;
            align-items: center;
        }

        .order-header div {
            flex-grow: 1;
        }

        .status-badge {
            padding: 10px 15px;
            font-size: 1rem;
        }

        .product-list {
            padding: 10px 0;
            border-top: 1px solid #ddd;
        }

        .product-item {
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
        }

        .product-image {
            width: 100px;
            height: 100px;
            margin-right: 20px;
        }

        .order-actions {
            justify-content: flex-end;
        }

        .btn-cancel,
        .btn-edit {
            padding: 10px 20px;
            font-size: 1rem;
        }

        .order-card {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }

        .order-card:hover {
            transform: translateY(-5px) scale(1.03);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .product-image:hover {
            transform: scale(1.1);
            transition: transform 0.3s ease-in-out;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
    }
    .pagination .page-link {
    color: #6c757d;
    background-color: #fff;
    border: 1px solid #dee2e6;
    padding: 0.5rem 0.75rem;
    margin: 0 0.25rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
}

.pagination .page-link:hover {
    background-color: #f8f9fa;
    color: #495057;
    text-decoration: none;
}

.pagination .page-item.active .page-link {
    background-color: #800000;
    color: white;
    border-color: #800000;
}

@media (max-width: 576px) {
    .pagination {
        flex-wrap: wrap;
        justify-content: center;
    }
    
    .pagination .page-item {
        margin: 0.25rem;
    }
}
</style>

<div class="container order-container">
    <h1 class="text-center mb-4">Order History</h1>

    <% if (orders && orders.length > 0) { %>
        <% orders.forEach(function(order) { %>
            <div class="order-card">
                <div class="order-header">
                    <div>
                        <strong>Order #<%= order.orderId.toString().slice(-8).toUpperCase() %></strong>
                        <p class="text-muted">
                            Ordered on <%= new Date(order.createdOn).toLocaleDateString('en-US', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            }) %>
                        </p>
                    </div>
                    <span class="status-badge status-<%= order.status.toLowerCase() %>">
                        <%= order.status %>
                    </span>
                </div>

                <div class="product-list">
                    <% if (order.orderedItems && Array.isArray(order.orderedItems) && order.orderedItems.length > 0) { %>
                        <% order.orderedItems.forEach(function(orderedItem) { %>
                            <div class="product-item">
                                <% 
                                const product = orderedItem.product && typeof orderedItem.product === 'object' 
                                    ? orderedItem.product 
                                    : {}; 
                                %>
                                <% if (product.productImage && product.productImage.length > 0) { %>
                                    <img src="/uploads/re-image/<%= product.productImage[0] %>" 
                                         alt="<%= product.productName || 'Product Image' %>"
                                         class="product-image">
                                <% } else { %>
                                    <img src="/assets/imgs/default-product.jpg" 
                                         alt="Default Image"
                                         class="product-image">
                                <% } %>
                                <div class="flex-grow-1">
                                    <%= product.productName || 'Product Name Unavailable' %> 
                                    <small>(Qty: <%= orderedItem.quantity || 1 %>)</small>
                                </div>
                                <strong>₹<%= (orderedItem.price || 0).toFixed(2) %></strong>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <p>No items found in this order.</p>
                    <% } %>
                </div>
                

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        <strong>Total: ₹<%= order.finalAmount.toFixed(2) %></strong>
                    </div>
                    <div class="order-actions mt-3  text-center">
                        <% if (order.status.toLowerCase() === 'payment pending') { %>
                                 <button id="continuePaymentButton" class="btn btn-repay" style="margin-left: 325px;" 
                                 onclick="confirmPayment('<%= order._id %>', '<%= order.paymentMethod %>')"><i class="fas fa-exchange-alt"></i> Continue Payment</button>
                        <% } %>
                    </div>
                    <div class="order-actions mt-3 text-center">
                        <% if (order.status.toLowerCase() === 'delivered') { %>
                            <button class="btn btn-return " style="background-color: #f44336; color: white;"  onclick="confirmReturn('<%= order._id %>')">
                                <i class="fas fa-undo-alt"></i> Return Order
                            </button>
                        <% } %>
                    </div>
                    <div class="order-actions">
                        <% if ((order.paymentMethod.toLowerCase() === 'online' || order.paymentMethod.toLowerCase() === 'cod') && 
                        order.status !== 'Cancelled' && 
                        ['Pending', 'Paid',].includes(order.status)) { %>
                            <button class="btn-cancel" onclick="cancelOrder('<%= order._id %>', 'Processing')">Cancel Order</button>
                        <% } %>
                       <button class="btn-edit" onclick="showOrderDetails('<%= JSON.stringify(order) %>')">View Details</button>
                    </div>
                </div>
            </div>
        <% }); %>
    <% } else { %>
        <div class="text-center">
            <p>No orders found.</p>
        </div>
    <% } %>
</div>
<nav aria-label="Order history pagination" class="d-flex justify-content-center mb-4">
        <ul class="pagination">
            <% if (currentPage > 1) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=1" aria-label="First">
                        <span aria-hidden="true"></span>
                    </a>
                </li>
            <% } %>

            <% if (currentPage > 1) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= currentPage - 1 %>" aria-label="Previous">
                        <span aria-hidden="true"></span>
                    </a>
                </li>
            <% } %>
            <% 
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            
            if (endPage - startPage < 4) {
                startPage = Math.max(1, endPage - 4);
            }
            
            for(let i = startPage; i <= endPage; i++) { 
            %>
                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
            <% } %>

            <!-- Next -->
            <% if (currentPage < totalPages) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= currentPage + 1 %>" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            <% } %>

            <!-- Last Page -->
            <% if (currentPage < totalPages) { %>
                <li class="page-item">
                    <a class="page-link" href="?page=<%= totalPages %>" aria-label="Last">
                        <span aria-hidden="true">&raquo;&raquo;</span>
                    </a>
                </li>
            <% } %>
        </ul>
    </nav>
<div class="modal fade order-details-modal" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="orderDetailsModalBody">
            </div>
    </div>
</div>


   


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    async function cancelOrder(orderId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Order',
            text: 'Are you sure you want to cancel this order?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!',
        });

        if (result.isConfirmed) {
            Swal.fire({
                title: 'Processing...',
                text: 'Please wait while we cancel your order.',
                allowOutsideClick: false,
                showConfirmButton: false,
                willOpen: () => {
                    Swal.showLoading();
                },
            });

            const response = await fetch('/cancel-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId }),
            });

            const data = await response.json();
            console.log('API Response:', data); 
            Swal.close();

            if (response.ok && data.success) {
                Swal.fire(
                    'Cancelled!',
                    'Your order has been cancelled successfully.',
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    data.message || 'Failed to cancel order. Please try again.',
                    'error'
                );
            }
        }
    } catch (error) {
        console.error('Cancel order error:', error);
        Swal.fire(
            'Error!',
            'Something went wrong. Please try again later.',
            'error'
        );
    }
}

function showOrderDetails(orderData) {
    try {
        const order = typeof orderData === 'string' ? JSON.parse(orderData) : orderData;
        const modalBody = document.getElementById('orderDetailsModalBody');
        const orderDetails = {
            orderId: order.orderId ? order.orderId.toString().slice(-8).toUpperCase() : 'N/A',
            date: order.createdOn ? new Date(order.createdOn).toLocaleDateString() : 'N/A',
            paymentMethod: order.paymentMethod || 'N/A',
            finalAmount: order.finalAmount || 0,
            status: order.status || 'N/A',
            address: order.address || null,
            items: order.orderedItems || [],
            couponCode: order.couponCode || 'No Coupon Applied',
            couponAmount: order.couponAmount || 0
        };
        console.log('order data -->', orderDetails)

        let detailsHTML = `
    <div class="row">
        <div class="col-md-6">
            <h6><strong>Order Information</strong></h6>
            <p><strong>Order ID:</strong> ${orderDetails.orderId}</p>
            <p><strong>Date:</strong> ${orderDetails.date}</p>
            <p><strong>Payment Method:</strong> ${orderDetails.paymentMethod}</p>
            <p><strong>Total Amount:</strong> ₹${orderDetails.finalAmount.toFixed(2)}</p>
            <p><strong>Status:</strong> ${orderDetails.status}</p>
        </div>
        <div class="col-md-6">
            <h6><strong>Shipping Address</strong></h6>
            <p>
                ${orderDetails.address ? `
                    ${orderDetails.address.name || 'Name not provided'}<br>
                    ${orderDetails.address.address || 'Address line not provided'}<br>
                    ${orderDetails.address.city || 'City'}, 
                    ${orderDetails.address.state || 'State'} 
                    ${orderDetails.address.pincode || 'Pincode'}<br>
                    ${orderDetails.address.landmark ? `Landmark: ${orderDetails.address.landmark}<br>` : ''}
                    ${orderDetails.address.phone || 'Phone not provided'}
                ` : 'No shipping address available'}
            </p>
        </div>
    </div>
    <hr>
    <div class="row">
        <div class="col-md-12">
            <h6><strong>Coupon Details</strong></h6>
            <p><strong>Coupon Code:</strong> ${orderDetails.couponCode}</p>
            <p><strong>Discount Amount:</strong> ${orderDetails.couponAmount ? `₹${orderDetails.couponAmount.toFixed(2)}` : 'N/A'}</p>
        </div>
    </div>
    <hr>
    <h6><strong>Ordered Items</strong></h6>
    <div class="row">
        ${orderDetails.items.length > 0 ? 
            orderDetails.items.map(item => `
                <div class="col-md-12 product-row d-flex align-items-center mb-3">
                    <div class="mr-3">
                        <img src="${
                            (item.product && item.product.productImage && item.product.productImage.length > 0) ? 
                            '/uploads/re-image/' + item.product.productImage[0] : 
                            '/assets/imgs/default-product.jpg'
                        }" 
                             alt="${(item.product && item.product.productName) ? item.product.productName : 'Product'}" 
                             style="width: 100px; height: 100px; object-fit: cover; margin-right: 15px;">
                    </div>
                    <div>
                        <p class="mb-1"><strong>${(item.product && item.product.productName) ? item.product.productName : 'Product Name Unavailable'}</strong></p>
                        <p class="mb-1">Quantity: ${item.quantity || 'N/A'}</p>
                        <p class="mb-1">Price: ₹${(item.price ? item.price.toLocaleString() : 'N/A')}</p>
                    </div>
                </div>
                  <div class="order-actions mt-3 text-center">
                        ${
                            orderDetails.status.toLowerCase() === 'pending' || orderDetails.status === 'Payment Pending'
                            ? '<p class="text-danger">Invoice cannot be downloaded.</p>'
                            : `<a href="/download-invoice/${order._id}" class="btn btn" style="background-color:#800000; color: white;">
                                    <i class="fas fa-file-invoice"></i> Download Invoice
                            </a>`
                        }
                    </div>

            `).join('<hr>') : 
            '<p>No items found in this order.</p>'
        }
    </div>
`;

        modalBody.innerHTML = detailsHTML;
        
        const orderDetailsModal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
        orderDetailsModal.show();

    } catch (error) {
        console.error('Error in showOrderDetails:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load order details. Please try again.',
            confirmButtonColor: '#800000'
        });
    }
}


    document.addEventListener('DOMContentLoaded', () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

    const orderCards = document.querySelectorAll('.order-card');
    orderCards.forEach(card => {
        card.addEventListener('mouseover', () => {
            card.style.transform = 'scale(1.02)';
        });
        card.addEventListener('mouseout', () => {
            card.style.transform = 'scale(1)';
        });
    });


    async function confirmPayment(orderId) {
          try {
            const res = await fetch(`/retry-payment?id=${orderId}`);
            if (!res.ok) {
              throw new Error("Failed to fetch order details");
            }

            const { razorpay, orderDetails } = await res.json();

            if (!orderDetails || !Array.isArray(orderDetails.orderedItems)) {
              throw new Error("Invalid order details received");
            }

            const orderedItemsHTML = orderDetails.orderedItems
              .map(item => `
        <p>
          <strong>Product:</strong> ${item.product.productName}<br>
          <strong>Quantity:</strong> ${item.quantity}<br>
          <strong>Price:</strong> ₹${item.price}
        </p>
      `).join("");

            const orderInfo = `
      <p><strong>Order ID:</strong> ${orderDetails.orderId}</p>
      <p><strong>Total Price:</strong> ₹${orderDetails.totalPrice}</p>
       <p><strong>Discount:</strong> ₹${orderDetails.discount}</p>
      <p><strong>Final Amount:</strong> ₹${orderDetails.finalAmount}</p>
      <p><strong>Status:</strong> ${orderDetails.status}</p>
      <p><strong>Payment Status:</strong> ${orderDetails.paymentStatus}</p>
      <p><strong>Payment Method:</strong> ${orderDetails.paymentMethod}</p>
      <h4>Ordered Items:</h4>
      ${orderedItemsHTML}
    `;

            const result = await Swal.fire({
              title: "Order Details",
              html: orderInfo,
              icon: "info",
              showCancelButton: true,
              confirmButtonColor: '#2563eb',
              cancelButtonColor: '#dc2626',
              cancelButtonText: 'Cancel',
              confirmButtonText: 'Pay Now',
              heightAuto: false
            });

            if (result.isConfirmed) {
              const options = {
                key: '<%= process.env.RAZOR_KEY_ID %>',
                amount: razorpay.amount,
                currency: razorpay.currency,
                order_id: razorpay.razorpayOrderId,
                handler: async function (paymentResponse) {
                  const updateRes = await fetch('/update-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      orderId: orderDetails.orderId,
                      paymentId: paymentResponse.razorpay_payment_id,
                      razorpayOrderId: paymentResponse.razorpay_order_id,
                      signature: paymentResponse.razorpay_signature,
                      status: 'paid'
                    })
                  });

                  if (updateRes.ok) {
                    Swal.fire("Success", "Payment completed successfully.", "success").then(() => {
                      window.location.reload();
                    });
                  } else {
                    Swal.fire("Error", "Payment succeeded, but order update failed. Contact support.", "error");
                  }
                },
                theme: { color: '#800000' }
              };

              const rzp = new Razorpay(options);

              rzp.on('payment.failed', function () {
                Swal.fire({
                  icon: 'error',
                  title: 'Payment Failed',
                  text: 'The payment process failed. Please try again.',
                  confirmButtonColor: '#800000'
                });
              });

              rzp.open();
            }
          } catch (error) {
            console.error("Error in retry payment:", error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: error.message || 'An error occurred while processing the payment.',
              confirmButtonColor: '#800000'
            });
          }
        }

        async function confirmReturn(orderId) {
          try {
            const result = await Swal.fire({
              title: "Return Order?",
              icon: "warning",
              text: "Reason for Returning Product",
              html: `<textarea id="returnReason" class="swal2-textarea" placeholder="Enter your reason here"></textarea>`,
              showCancelButton: true,
              confirmButtonText: 'Submit',
              cancelButtonText: 'Cancel',
              preConfirm: () => {
                const reason = document.getElementById('returnReason').value.trim();
                if (!reason) {
                  Swal.showValidationMessage('Reason cannot be empty');
                }
                return reason;
              }
            });

            if (result.isConfirmed) {
              const reason = result.value;

              const response = await fetch('/return-request', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json', 
                },
                body: JSON.stringify({ 
                  orderId: orderId,
                  reason: reason,
                }),
              });

              const responseData = await response.json();
              console.log(responseData)
              if (response.ok) {
                Swal.fire('Success!', responseData.message, 'success');
              } else {
                Swal.fire('Error!', responseData.message, 'error');
              }
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire('Error!', 'Something went wrong. Please try again.', 'error');
          }
        }

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<%- include('../layouts/user/footer.ejs') %>
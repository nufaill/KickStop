<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Kickstop - Sign Up</title>
  <style>
    * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/* Existing container styling */
.container {
  position: relative;
  display: flex;
  width: 90%;
  max-width: 1000px;
  height: 80vh;
  box-shadow: 0px 8px 24px rgba(0, 0, 0, 0.2);
  border-radius: 15px;
  overflow: hidden;
  background-color: rgba(255, 255, 255, 0.8);
}

body {
  position: relative;
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  overflow: hidden;
  transition: background 2s ease;
}


.container {
  display: flex;
  width: 90%;
  max-width: 1000px;
  height: 80vh;
  box-shadow: 0px 8px 24px rgba(0, 0, 0, 0.2);
  border-radius: 15px;
  overflow: hidden;
  background-color: rgba(255, 255, 255, 0.8); /* Slight background opacity for contrast */
}

.left-side {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  overflow: hidden;
}

/* Overlay container */
.overlay {
  position: relative;
  width: 100%;
  height: 100%;
}

/* "Kickstop" Text Overlay */
.website-name {
  position: absolute;
  top: 20px;
  left: 20px;
  font-size: 3rem;
  font-weight: bold;
  color: #222;
  z-index: 2;
}

/* Shoe Image Styling */
.shoe-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 10px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}
/* Right Side - signup Form */
.right-side {
  flex: 1;
  padding: 40px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  background-color: white;
  border-radius: 0 15px 15px 0;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

.right-side h2 {
  margin-bottom: 1.5rem;
  font-size: 2rem;
  color: #333;
  text-align: center;
}

.input-container {
  margin-bottom: 1.2rem;
}

.input-container label {
  display: block;
  color: #666;
  margin-bottom: 0.3rem;
  font-size: 0.9rem;
}

.input-container input {
  width: 100%;
  padding: 0.8rem;
  border-radius: 5px;
  border: 2px solid #ddd;
  outline: none;
  transition: border-color 0.3s ease;
}

.input-container input:focus {
  border-color: #4caf50;
  box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
}

.signup-btn {
  width: 100%;
  padding: 0.8rem;
  border: none;
  border-radius: 5px;
  background: linear-gradient(45deg, #800000, #600000);
  color: #fff;
  font-weight: bold;
  cursor: pointer;
  transition: transform 0.2s ease, background-color 0.3s ease;
}

.signup-btn:hover {
  transform: scale(1.05);
}
.login-link {
  margin-top: 20px;
  font-size: 0.9rem;
  text-align: center;
  color: #555;
}

.login-link a {
  color: #007BFF;
  text-decoration: none;
  font-weight: bold;
  transition: color 0.3s ease, text-decoration 0.3s ease;
}

.login-link a:hover {
  color: #0056b3;
  text-decoration: underline;
}
.error-message {
      color: red;
      font-size: 0.85rem;
    }
    @media (max-width: 768px) {
  .container {
    flex-direction: column;
    height: auto;
    overflow-y: auto; 
    max-height: 100vh; 
  }
  .left-side, .right-side {
    flex: unset;
    width: 100%;
    padding: 20px;
  }
  .shoe-image {
    border-radius: 0; 
  }
}
.is-invalid {
  border-color: red !important;
  box-shadow: 0 0 0 3px rgba(255, 0, 0, 0.2) !important;
  transition: box-shadow 0.2s ease, border-color 0.2s ease;
}

/* Button Styling */
.google-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #ffffff;
    border: 2px solid #db4437;
    border-radius: 8px;
    padding: 10px 20px;
    font-size: 16px;
    font-weight: bold;
    color: #555555;
    text-decoration: none;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

.google-btn svg {
    margin-right: 10px;
    height: 20px;
    width: 20px;
}

.google-btn:hover {
    background-color: #fbe9e7;
    border-color: #c62828;
    color: #222222;
    box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.2);
}

.google-btn:focus {
    outline: none;
    border-color: #c62828;
    box-shadow: 0px 0px 0px 4px rgba(198, 40, 40, 0.2);
}

  </style>
</head>
<body>
  <div class="container">
    <!-- Left Side -->
    <div class="left-side">
        <div class="overlay">
            <div class="website-name" style="color: white;"></div>
            <img src="/evara-frontend/assets/imgs/new_images/image.png" alt="Shoe Image" class="shoe-image">
          </div>
    </div>

    <!-- Right Side - signup Form -->
    <div class="right-side">
      <h2>Sign Up</h2>
      <% if (typeof message !== "undefined") { %>
        <p class="error-message"><%= message %></p>
      <% } %>
      
      <form id="signupForm" method="post" action="/signup" onsubmit="return validateForm();">
        <div class="input-container">
          <label for="full-name">Full Name</label>
          <input type="text" id="full-name" name="fullname" aria-describedby="usernameError" aria-label="Full Name">
          <span id="usernameError" class="error-message"></span>
        </div>
        <div class="input-container">
          <label for="email">Email Address</label>
          <input type="email" id="email" name="email">
          <span id="emailError" class="error-message"></span>
        </div>
        <div class="input-container">
          <label for="password">Password</label>
          <input type="password" id="password" name="password">
          <span id="passwordError" class="error-message"></span>
        </div>
        <div class="input-container">
          <label for="confirm-password">Confirm Password</label>
          <input type="password" id="confirm-password" name="cpassword">
          <span id="cpasswordError" class="error-message"></span>
        </div>
        <button type="submit" class="signup-btn">Create Account</button>
        <div class="mt-2px">
          <p>or sign up with</p>
        </div>
        <div class="social-btns">
          <a href="/auth/google" class="google-btn">
              <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="-0.5 0 48 48" version="1.1" aria-hidden="true" focusable="false">
                  <title>Google Logo</title>
                  <g stroke="none" fill="none" fill-rule="evenodd">
                      <g transform="translate(-401.000000, -860.000000)">
                          <g transform="translate(401.000000, 860.000000)">
                              <path d="M9.82727273,24 C9.82727273,22.4757333 10.0804318,21.0144 10.5322727,19.6437333 L2.62345455,13.6042667 C1.08206818,16.7338667 0.213636364,20.2602667 0.213636364,24 C0.213636364,27.7365333 1.081,31.2608 2.62025,34.3882667 L10.5247955,28.3370667 C10.0772273,26.9728 9.82727273,25.5168 9.82727273,24" fill="#FBBC05"></path>
                              <path d="M23.7136364,10.1333333 C27.025,10.1333333 30.0159091,11.3066667 32.3659091,13.2266667 L39.2022727,6.4 C35.0363636,2.77333333 29.6954545,0.533333333 23.7136364,0.533333333 C14.4268636,0.533333333 6.44540909,5.84426667 2.62345455,13.6042667 L10.5322727,19.6437333 C12.3545909,14.112 17.5491591,10.1333333 23.7136364,10.1333333" fill="#EB4335"></path>
                              <path d="M23.7136364,37.8666667 C17.5491591,37.8666667 12.3545909,33.888 10.5322727,28.3562667 L2.62345455,34.3946667 C6.44540909,42.1557333 14.4268636,47.4666667 23.7136364,47.4666667 C29.4455,47.4666667 34.9177955,45.4314667 39.0249545,41.6181333 L31.5177727,35.8144 C29.3995682,37.1488 26.7323182,37.8666667 23.7136364,37.8666667" fill="#34A853"></path>
                              <path d="M46.1454545,24 C46.1454545,22.6133333 45.9318182,21.12 45.6113636,19.7333333 L23.7136364,19.7333333 L23.7136364,28.8 L36.3181818,28.8 C35.6879545,31.8912 33.9724545,34.2677333 31.5177727,35.8144 L39.0249545,41.6181333 C43.3393409,37.6138667 46.1454545,31.6490667 46.1454545,24" fill="#4285F4"></path>
                          </g>
                      </g>
                  </g>
              </svg>
              <span>Continue with Google</span>
          </a>
      </div>
      
      </form>
      <div class="login-link">
        Already have an account? <a href="/login">Login here</a>
    </div>
    </div>
  </div>
  <script>
function validateForm() {
    let isValid = true;

    const username = document.getElementById('full-name');
    const email = document.getElementById('email');
    const password = document.getElementById('password');
    const cpassword = document.getElementById('confirm-password');
    const terms = document.getElementById('terms')?.checked; 

    // Email pattern validation
    const emailPattern = /^[^ ]+@[^ ]+\.[a-z]{2,3}$/;

    // Clear previous errors and remove is-invalid classes
    resetValidation(username, 'usernameError');
    resetValidation(email, 'emailError');
    resetValidation(password, 'passwordError');
    resetValidation(cpassword, 'cpasswordError');
    if (document.getElementById('termsError')) {
        document.getElementById('termsError').textContent = '';
    }

    // Username validation
    if (!username.value.trim()) {
        setInvalid(username, 'usernameError', 'Full name is required');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(username.value.trim())) {
        setInvalid(username, 'usernameError', 'Full name can only contain letters');
        isValid = false;
    } else if (username.value.trim().length < 2) {
        setInvalid(username, 'usernameError', 'Full name must be at least 2 characters long');
        isValid = false;
    } else if (username.value.trim().length > 30) {
        setInvalid(username, 'usernameError', 'Full name cannot exceed 30 characters');
        isValid = false;
    }

    // Email validation
    if (!email.value.trim() || !emailPattern.test(email.value.trim())) {
        setInvalid(email, 'emailError', 'Please enter a valid email');
        isValid = false;
    }

    // Password validation
    if (!password.value.trim()) {
        setInvalid(password, 'passwordError', 'Password is required');
        isValid = false;
    } else {
        const minLength = 8;
        const hasUpperCase = /[A-Z]/.test(password.value);
        const hasLowerCase = /[a-z]/.test(password.value);
        const hasNumbers = /\d/.test(password.value);
        const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password.value);

        let strengthErrors = [];

        if (password.value.length < minLength) strengthErrors.push('at least 8 characters');
        if (!hasUpperCase) strengthErrors.push('an uppercase letter');
        if (!hasLowerCase) strengthErrors.push('a lowercase letter');
        if (!hasNumbers) strengthErrors.push('a number');
        if (!hasSpecialChar) strengthErrors.push('a special character');

        if (strengthErrors.length > 0) {
            setInvalid(password, 'passwordError', `Password must contain ${strengthErrors.join(', ')}`);
            isValid = false;
        }
    }

    // Confirm Password validation
    if (!cpassword.value.trim()) {
        setInvalid(cpassword, 'cpasswordError', 'Please confirm your password');
        isValid = false;
    } else if (password.value !== cpassword.value) {
        setInvalid(cpassword, 'cpasswordError', 'Passwords do not match');
        isValid = false;
    }

    // Terms checkbox validation (if added)
    if (terms !== undefined && !terms) {
        document.getElementById('termsError').textContent = 'You must agree to the terms and policy';
        isValid = false;
    }

    return isValid;
}

// Helper function to set validation errors
function setInvalid(input, errorId, errorMessage) {
    input.classList.add('is-invalid');
    document.getElementById(errorId).textContent = errorMessage;
}

// Helper function to reset validation
function resetValidation(input, errorId) {
    input.classList.remove('is-invalid');
    document.getElementById(errorId).textContent = '';
}


  document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector("body");
  
    const gradients = [
    "linear-gradient(135deg, #ffffff 10%, #f7f7f7 90%)",     
    "linear-gradient(135deg, #ffffff 20%, #eaeaea 80%)",      
    "linear-gradient(135deg, #ffffff 15%, #f4f4f4 85%)",      
    "linear-gradient(135deg, #ffffff 10%, #ededed 90%)",      
    "linear-gradient(135deg, #ffffff 25%, #f9f9f9 75%)",      
    "linear-gradient(135deg, #ffffff 20%, #f0f0f0 80%)",      
    "linear-gradient(135deg, #ffffff 10%, #fcfcfc 50%, #f7f7f7 90%)", 
    "linear-gradient(135deg, #ffffff 20%, #f2f2f2 80%)",      
    "linear-gradient(135deg, #ffffff 15%, #ebebeb 85%)",      
    "linear-gradient(135deg, #ffffff 10%, #e5e5e5 90%)"      
];

    let gradientIndex = 0;
  
    setInterval(() => {
      container.style.background = gradients[gradientIndex];
      container.style.transition = "background 1s ease"; 
      gradientIndex = (gradientIndex + 1) % gradients.length; 
    }, 4000);

    
  });
  

  </script>

</body>
</html>
